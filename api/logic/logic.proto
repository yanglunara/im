syntax = "proto3";


package im.logic;

option go_package = "./api/logic;logic";

import "third_party/validate/validate.proto";

message PushMessage {
    enum Type{
        Push = 0;
        Room = 1;
        Braodcast = 2;
    }
    Type type = 1;
    int32 operation = 2;
    int32 speed = 3;
    string servrice = 4;
    string room = 5;
    repeated string keys = 6;
    bytes msg = 7;
}

message ConnectReq {
    string server = 1;
    string cookie = 2;
    bytes token = 3;
}



message ConnectResp {
    int64 mid = 1;
    string key = 2;
    string roomID = 3;
    repeated int32 accepts = 4;
    int64 heartbeat = 5;
}



message DisconnectReq {
    int64 mid = 1;
    string key = 2 [(validate.rules).string.min_len = 1];
    string server = 3 [(validate.rules).string.min_len = 1];
}

message DisconnectResp {
    bool has = 1;
}


message HeartbeatReq {
    int64 mid = 1;
    string key = 2 [(validate.rules).string.min_len = 1];
    string server = 3 [(validate.rules).string.min_len = 1];
}

message HeartbeatResp {
    bool has = 1;
}

message OnlineReq {
    string server = 1 [(validate.rules).string.min_len = 1];
    map<string, int32> roomCount = 2 [(validate.rules).map.min_pairs = 1];
}

message OnlineResp {
    map<string, int32> allRoomCount = 1;
}

message Proto {
    int32 ver = 1;
    int32 op = 2;
    int32 seq = 3;
    bytes body = 4;
}


message ReceiveReq {
    int64 mid = 1;
    Proto proto = 2;
}

message ReceiveResp{
}

message NodesReq {
	string platform = 1 [(validate.rules).string.min_len = 1];
	string clientIP = 2 [(validate.rules).string.min_len = 1];
}

message NodesResp {
	string domain = 1 [(validate.rules).string.min_len = 1];
	int32 tcp_port = 2 [(validate.rules).int32.gte = 1024, (validate.rules).int32.lte = 65535];
	int32 ws_port = 3 [(validate.rules).int32.gte = 1024, (validate.rules).int32.lte = 65535];
	int32 wss_port = 4 [(validate.rules).int32.gte = 1024, (validate.rules).int32.lte = 65535];
	int32 heartbeat = 5 [(validate.rules).int32.gte = 1];
	repeated string nodes = 6 [(validate.rules).repeated.min_items = 1];
	Backoff backoff = 7;
	int32 heartbeat_max = 8;
}

message Backoff {
	int32	max_delay = 1;
	int32	base_delay = 2;
	float	factor = 3;
	float	jitter = 4;
}

service Logic {
    // Connect
    rpc Connect(ConnectReq) returns (ConnectResp);
    // Disconnect
    rpc Disconnect(DisconnectReq) returns (DisconnectResp);
    // Heartbeat
    rpc Heartbeat(HeartbeatReq) returns (HeartbeatResp);
    // RenewOnline
    rpc RenewOnline(OnlineReq) returns (OnlineResp);
    // Receive
    rpc Receive(ReceiveReq) returns (ReceiveResp);
	//ServerList
	rpc Nodes(NodesReq) returns (NodesResp);
}
